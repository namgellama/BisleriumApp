@page "/orders"

<nav class="navbar navbar-light bg-light justify-content-between px-3">
    <h1 class="navbar-brand mb-0 h1">Orders</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddOrderDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>

<table class="table">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Coffee</th>
            <th>Add In</th>
            <th>Total Price</th>
            <th>Status</th>
            <th>Ordered At</th>
            <th>Created By</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<OrderItem> orderList = _orders;
            foreach (var order in orderList)
            {
                <tr>
                    <td>
                        <div class="d-flex flex-column">
                        @order.Customer
                        @{
                            var customer = CustomersService.GetByPhoneNumer(order.Customer);
                            if (customer == null)
                            {
                                 <span class="badge rounded-pill bg-secondary">Normal</span>
                            } else
                            {
                                <span class="badge rounded-pill bg-warning">Member</span>   
                            }
                        }
                        </div>
                    </td>
                    <td>
                        <div>
                            <p class="my-0">@order.Coffee</p>
                            <p class="my-0">(Rs. @order.CoffeePrice)</p>
                        </div>
                    </td>
                    <td>
                        <div>
                            @if (order.AddIn == null)
                            {
                                <p class="my-0"></p>
                            } else
                            {
                                <p class="my-0">@order.AddIn</p>
                                <p class="my-0">(Rs. @order.AddInPrice)</p>
                            }
                        </div>
                    </td>
                    <td>Rs. @order.TotalPrice</td>
                    <td>
                        @if (order.isComplementary)
                        {
                            <span class="badge bg-success">Complementary</span>
                        } else
                        {
                            <span class="badge bg-secondary">Normal</span>
                        }
                    </td>
                    <td>@order.CreatedAt.ToString("MMM dd, yyyy h:mm tt")</td>
                    <td>
                        @{
                            var creator = UsersService.GetById(order.CreatedBy);
                            <span>@(creator == null ? "Unknown" : creator.Username)</span>
                        }
                    </td>
                    <td>
                        <button class="btn btn-info text-white btn-sm m-1" type="button"
                                @onclick="()=>OpenEditOrderDialog(order)">
                            <span class="oi oi-pencil" /> Edit
                        </button>
                        <button class="btn btn-danger btn-sm m-1" type="button" @onclick="() => OpenDeleteOrderDialog(order)">
                            <span class="oi oi-delete" /> Delete
                        </button>
                        
                    </td>
                </tr>

            }
        }
    </tbody>
</table>

@if (_showEditOrderDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditOrderDialogClose" OkLabel="@_dialogOkLabel">
        <select class="form-select my-2" @onchange="HandleCoffeeTypeChange">
            <option value="">Select Coffee Type *</option>
            @{
                foreach (var coffee in _coffees)
                {
                    <option value=@coffee.Key selected=@(_orderModel.Id != Guid.Empty && coffee.Key == _selectedCoffeeType)>@coffee.Key</option>
                }
            }

        </select>
        <select class="form-select my-2" @onchange="HandleAddInTypeChange">
            <option value="">Select Add Ins</option>
            @{
                foreach (var addIn in _addIns)
                {
                    <option value=@addIn.Key selected=@(_orderModel.Id != Guid.Empty && addIn.Key == _selectedAddInType)>@addIn.Key</option>
                }
            }

        </select>
        <div class="my-2">
            <label for="customerList" class="form-label">Customer</label>
            <input class="form-control" list="customerOptions" @bind="_orderModel.Customer" id="customerList" placeholder="Type to search...">
           
        </div>
        <div class="align-self-end mt-4 d-flex flex-column align-items-end">
            <p class="my-0">Coffee Price: <span class="ms-2">Rs.  @_selectedCoffeePrice</span></p>
            <p class="my-0">Add Ins Price: <span class="ms-2">Rs. @_selectedAddInPrice</span></p>
            <p class="my-2 fw-bold">Total Price:  <span class="ms-2">Rs. @_totalPrice</span></p>
        </div>

        @if (!string.IsNullOrEmpty(_editOrderErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editOrderErrorMessage" />
        }
    </ModalDialog>
}

@if (_showDeleteOrderDialog)
{
    <ModalDialog Title="Delete Order" OnClose="@OnDeleteOrderDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteOrder.Id</strong> ?</p>
        @if (!string.IsNullOrEmpty(_deleteOrderErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteOrderErrorMessage" />
        }
    </ModalDialog>
}



@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<Customer> _customers { get; set; }
    private List<OrderItem> _orders { get; set; }



    CoffeeChoice _coffees = new CoffeeChoice();
    AddInChoice _addIns = new AddInChoice();

    private OrderItem _orderModel { get; set; }
    private OrderItem _deleteOrder { get; set; }

    private string _selectedCoffeeType { get; set; }
    private int _selectedCoffeePrice { get; set; }
    private string _selectedAddInType { get; set; }
    private int _selectedAddInPrice { get; set; }
    private int _totalPrice { get; set; }


    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }

    private bool _showEditOrderDialog { get; set; }
    private bool _showDeleteOrderDialog { get; set; }
    private bool _showPayOrderDialog { get; set; }

    private string _editOrderErrorMessage { get; set; }
    private string _deleteOrderErrorMessage { get; set; }



    protected override void OnInitialized()
    {
        _orders = OrdersService.GetAll();
        _customers = CustomersService.GetAll();


    }

    private void HandleCoffeeTypeChange(ChangeEventArgs e)
    {   
        _selectedCoffeeType = e.Value.ToString();
        _selectedCoffeePrice = _coffees.GetCoffeePrice(_selectedCoffeeType);
        _totalPrice = _selectedCoffeePrice + _selectedAddInPrice;
    }

    private void HandleAddInTypeChange(ChangeEventArgs e)
    {  
        if (_selectedCoffeeType != null)
        {
            _selectedAddInType = e.Value.ToString();
            _selectedAddInPrice = _addIns.GetAddInPrice(_selectedAddInType);
            _totalPrice = _selectedCoffeePrice + _selectedAddInPrice;
        } else
        {
            _totalPrice = _selectedAddInPrice;
        }

    }

    private bool GetComplementaryStatus()
    {
        int customerCount = 0;
        Customer customer = CustomersService.GetByPhoneNumer(_orderModel.Customer);

        foreach (var order in _orders)
        {
            if (order.Customer == _orderModel.Customer && customer != null && order.isComplementary == false)
            {
                customerCount++;
            }
        }

        if (customerCount != 0 && customerCount % 10 == 0)
        {
            return true;
        }   
        else
        {
            return false;
        }
    }


    private void OpenAddOrderDialog()
    {
        _dialogTitle = "Add Order";
        _dialogOkLabel = "Add";
        _orderModel = new OrderItem();
        _orderModel.Id = Guid.Empty;
        _showEditOrderDialog = true;
    }

    private void OpenEditOrderDialog(OrderItem editOrder)
    {
        _dialogTitle = "Edit Order";
        _dialogOkLabel = "Save";

        _orderModel = editOrder;
        _selectedAddInPrice = _orderModel.AddInPrice;
        _selectedCoffeePrice = _orderModel.CoffeePrice;
        _totalPrice = _orderModel.TotalPrice;


        _selectedCoffeeType = _orderModel.Coffee;
        _selectedAddInType = _orderModel.AddIn;


        _showEditOrderDialog = true;
    }

    private void OpenDeleteOrderDialog(OrderItem order)
    {
        _deleteOrder = order;
        _showDeleteOrderDialog = true;
    }

    private void ClearInputs()
    {
        _selectedCoffeeType = null;
        _selectedAddInType = null;
        _selectedAddInPrice = 0;
        _selectedCoffeePrice = 0;
        _totalPrice = 0;
    }

    private void OnEditOrderDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditOrderDialog = false;
            _selectedAddInPrice = 0;
            _selectedCoffeePrice = 0;
            _totalPrice = 0;
            _editOrderErrorMessage = null;
        }
        else
        {
            try
            {
                _editOrderErrorMessage = "";

                bool isComplementary = GetComplementaryStatus();

                if (isComplementary)
                {
                    _orderModel.isComplementary = true;
                } else
                {
                    _orderModel.isComplementary = false;
                }

                if (_orderModel.Id == Guid.Empty)
                {
                    _orders = OrdersService.Create(coffee: _selectedCoffeeType, addIn: _selectedAddInType, coffeePrice: _selectedCoffeePrice, addInPrice: _selectedAddInPrice, totalPrice: _totalPrice, userId: _globalState.CurrentUser.Id, phoneNumber: _orderModel.Customer, isComplementary: _orderModel.isComplementary);
                } else
                {
                    _orders = OrdersService.Update(coffee: _selectedCoffeeType, addIn: _selectedAddInType, coffeePrice: _selectedCoffeePrice, addInPrice: _selectedAddInPrice, totalPrice: _totalPrice, userId: _globalState.CurrentUser.Id, phoneNumber: _orderModel.Customer, id: _orderModel.Id);
                }
                _showEditOrderDialog = false;
                ClearInputs();
            }
            catch (Exception e)
            {
                _editOrderErrorMessage = e.Message;
            }
        }
    }

    private void OnDeleteOrderDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteOrderDialog = false;
            _deleteOrder = null;
        }
        else
        {
            try
            {
                _deleteOrderErrorMessage = "";
                _orders = OrdersService.Delete(_globalState.CurrentUser.Id, _deleteOrder.Id);
                _showDeleteOrderDialog = false;
                _deleteOrder = null;
            }
            catch (Exception e)
            {
                _deleteOrderErrorMessage = e.Message;
            }
        }
    }

}
