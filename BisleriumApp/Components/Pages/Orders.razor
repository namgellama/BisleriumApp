@page "/orders"

<nav class="navbar navbar-light bg-light justify-content-between px-3">
    <h1 class="navbar-brand mb-0 h1">Orders</h1>
    <button class="btn btn-primary" type="button" @onclick="OpenAddOrderDialog">
        <span class="oi oi-plus" /> Add
    </button>
</nav>

<table class="table">
    <thead>
        <tr>
            <th>S.N.</th>
            <th>Customer</th>
            <th>Coffee</th>
            <th>Add In</th>
            <th>Total Price</th>
            <th>Status</th>
            <th>Ordered At</th>
            <th>Created By</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @{
            IEnumerable<OrderItem> orderList = _orders;
            int count = 1;
            foreach (var order in orderList)
            {
                <tr>
                <td>@count</td>
                    <td>
                        <div class="d-flex flex-column">
                        @order.Customer
                            @{
                                var customer = CustomersService.GetByPhoneNumer(order.Customer);
                                if (customer != null)
                                {
                                    var className = customer.CustomerRole == CustomerRole.Regular ? "badge rounded-pill bg-success" : "badge rounded-pill bg-warning";
                                    <span class=@className>@customer.CustomerRole.ToString()[0]</span>
                            } 
                        }
                        </div>
                    </td>
                    <td>
                        <div>
                            <p class="my-0">@order.Coffee</p>
                            <p class="my-0">(Rs. @order.CoffeePrice)</p>
                        </div>
                    </td>
                    <td>
                        <div>
                            @if (order.AddIn == null || order.AddIn.Length == 0)
                            {
                                <p class="my-0"></p>
                            } else
                            {
                                <p class="my-0">@order.AddIn</p>
                                <p class="my-0">(Rs. @order.AddInPrice)</p>
                            }
                        </div>
                    </td>
                    <td>Rs. @order.TotalPrice</td>
                    <td>
                        @if (order.isComplementary)
                        {
                            <span class="badge bg-success">Complementary</span>
                        } else
                        {
                            <span class="badge bg-secondary">Normal</span>
                        }
                    </td>
                    <td>@order.CreatedAt.ToString("MMM dd, yyyy h:mm tt")</td>
                    <td>
                        @{
                            var creator = UsersService.GetById(order.CreatedBy);
                            <span>@(creator == null ? "Unknown" : creator.Username)</span>
                        }
                    </td>
                    <td>
                        @{
                            TimeSpan timeDifference = DateTime.Now - order.CreatedAt;
                            bool disable = timeDifference.TotalHours >= 12;
                            string buttonClass = disable ? "btn btn-secondary btn-sm m-1" : "btn btn-info text-white btn-sm m-1";
                            
                                <button class=@buttonClass type="button"
                                    @onclick="()=>OpenEditOrderDialog(order)" disabled=@disable>
                                <span class="oi oi-pencil" /> Edit
                            </button> 
                        }
                        
                        <button class="btn btn-danger btn-sm m-1" type="button" @onclick="() => OpenDeleteOrderDialog(order)">
                            <span class="oi oi-delete" /> Delete
                        </button>
                        
                    </td>
                </tr>
                count++;
            }
        }
    </tbody>
</table>

@if (_showEditOrderDialog)
{
    <ModalDialog Title="@_dialogTitle" OnClose="@OnEditOrderDialogClose" OkLabel="@_dialogOkLabel">
        <select class="form-select my-2" @onchange="HandleCoffeeTypeChange">
            <option value="">Select Coffee Type *</option>
            @{
                foreach (var coffee in _coffees)
                {
                    <option value=@coffee.Id selected=@(_orderModel.Coffee == coffee.Name)>@coffee.Name</option>
                }
            }

        </select>
        <select class="form-select my-2" @onchange="HandleAddInTypeChange">
            <option value="">Select Add Ins</option>
            @{
                foreach (var addIn in _addIns)
                {
                    <option value=@addIn.Id selected=@(_orderModel.AddIn == addIn.Name)>@addIn.Name</option>
                }
            }

        </select>
        <div class="my-2">
            <label for="customerList" class="form-label">Customer</label>
            <input class="form-control" list="customerOptions" value=@(_edit ? _orderModel.Customer : _selectedCustomer) @onchange="HandleCustomerChange" id="customerList" placeholder="Type to search..." readonly=@_edit>
            <!--<input class="form-control" list="customerOptions" @bind="_orderModel.Customer" id="customerList" placeholder="Type to search...">-->
           
        </div>
        <div class="align-self-end mt-4 d-flex flex-column align-items-end">
            <p class="my-0">Coffee Price: <span class="ms-2">Rs.  @_selectedCoffeePrice</span></p>
            <p class="my-0">Add Ins Price: <span class="ms-2">Rs. @_selectedAddInPrice</span></p>
            @{
               
                if (_discount)
                {
                    <p class="my-0">Discount: <span class="ms-2">10%</span></p>
                }
            }
            <p class="my-2 fw-bold">Total Price:  <span class="ms-2">Rs. @_totalPrice</span></p>
        </div>

        @if (!string.IsNullOrEmpty(_editOrderErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_editOrderErrorMessage" />
        }
    </ModalDialog>
}

@if (_showDeleteOrderDialog)
{
    <ModalDialog Title="Delete Order" OnClose="@OnDeleteOrderDialogClose" OkLabel="Confirm">
        <p>Are you sure you want to delete <strong>@_deleteOrder.Id</strong> ?</p>
        @if (!string.IsNullOrEmpty(_deleteOrderErrorMessage))
        {
            <AlertMessage Type="danger" Message="@_deleteOrderErrorMessage" />
        }
    </ModalDialog>
}



@code {
    [CascadingParameter]
    private GlobalState _globalState { get; set; }
    private List<Customer> _customers { get; set; }
    private List<OrderItem> _orders { get; set; }
    private List<Coffee> _coffees { get; set; }
    private List<AddIns> _addIns { get; set; }



    private OrderItem _orderModel { get; set; }
    private OrderItem _deleteOrder { get; set; }

    private string _selectedCoffeeType { get; set; }
    private int _selectedCoffeePrice { get; set; }
    private string _selectedAddInType { get; set; }
    private int _selectedAddInPrice { get; set; }
    private int _totalPrice { get; set; }
    private bool _discount { get; set; }
    private string _selectedCustomer { get; set; }

    private string _dialogTitle { get; set; }
    private string _dialogOkLabel { get; set; }

    private bool _showEditOrderDialog { get; set; }
    private bool _showDeleteOrderDialog { get; set; }
    private bool _showPayOrderDialog { get; set; }

    private string _editOrderErrorMessage { get; set; }
    private string _deleteOrderErrorMessage { get; set; }
    private bool _edit { get; set; }



    protected override void OnInitialized()
    {
        _orders = OrdersService.GetAll();
        _customers = CustomersService.GetAll();
        _coffees = CoffeesService.GetAll();
        _addIns = AddInsService.GetAll();


    }


    private void HandleCoffeeTypeChange(ChangeEventArgs e)
    {
        if (e.Value.ToString() != null)
        {
            _selectedCoffeeType = e.Value.ToString();
            if (_selectedCoffeeType.Length == 0)
            {
                _selectedCoffeePrice = 0;
                _selectedCoffeeType = "";
            } else
            {
                _selectedCoffeePrice = CoffeesService.GetCoffeePrice(Guid.Parse(_selectedCoffeeType));
                _selectedCoffeeType = CoffeesService.GetCoffeeName(Guid.Parse(e.Value.ToString()));
                UpdateTotalPrice();
            }

            UpdateTotalPrice();


        }
    }


    private void HandleAddInTypeChange(ChangeEventArgs e)
    {  
        if (e.Value.ToString() != null)
        {   
            _selectedAddInType = e.Value.ToString();

            if (_selectedAddInType.Length == 0)
            {
                _selectedAddInPrice = 0;
                _selectedAddInType = "";
            } else
            {
                _selectedAddInPrice = AddInsService.GetAddInsPrice(Guid.Parse(_selectedAddInType));
                _selectedAddInType = AddInsService.GetAddInsName(Guid.Parse(e.Value.ToString()));
            }


            UpdateTotalPrice();

        } 

    }

    private void HandleCustomerChange(ChangeEventArgs e)
    {  
        if (e.Value.ToString() != null)
        {   
            _selectedCustomer = e.Value.ToString();

            Customer customer = CustomersService.GetByPhoneNumer(_selectedCustomer);

            if (customer != null && customer.CustomerRole == CustomerRole.Regular)
            {
                _discount = true;
                UpdateTotalPrice();
            } else
            {
                _discount = false;
            }

        } 

    }


    private void UpdateTotalPrice()
    {

        _totalPrice = _selectedCoffeePrice + _selectedAddInPrice;

        if (_discount)
        {
            double discountAmount = 0.1 * _totalPrice;
            _totalPrice -= (int)discountAmount;
        }
    }


    private void OpenAddOrderDialog()
    {
        _dialogTitle = "Add Order";
        _dialogOkLabel = "Add";
        _orderModel = new OrderItem();
        _orderModel.Id = Guid.Empty;
        _showEditOrderDialog = true;
    }

    private void OpenEditOrderDialog(OrderItem editOrder)
    {
        _dialogTitle = "Edit Order";
        _dialogOkLabel = "Save";

        _orderModel = editOrder;
        _selectedAddInPrice = _orderModel.AddInPrice;
        _selectedCoffeePrice = _orderModel.CoffeePrice;
        _totalPrice = _orderModel.TotalPrice;


        _selectedCoffeeType = _orderModel.Coffee;
        _selectedAddInType = _orderModel.AddIn;


        _showEditOrderDialog = true;
        _edit = true;

        var customer = CustomersService.GetByPhoneNumer(_orderModel.Customer); 

        if (customer != null && customer.CustomerRole == CustomerRole.Regular)
        {
            _discount = true;
        } else
        {
            _discount = false;
        }
    }

    private void OpenDeleteOrderDialog(OrderItem order)
    {
        _deleteOrder = order;
        _showDeleteOrderDialog = true;
    }

    private void ClearInputs()
    {
        _selectedCoffeeType = null;
        _selectedAddInType = null;
        _selectedAddInPrice = 0;
        _selectedCoffeePrice = 0;
        _totalPrice = 0;
        _discount = false;
    }

    private void OnEditOrderDialogClose(bool isCancel)
    {
        if (isCancel)
        {
            _showEditOrderDialog = false;
            _selectedAddInPrice = 0;
            _selectedCoffeePrice = 0;
            _totalPrice = 0;
            _editOrderErrorMessage = null;
            _orderModel.Customer = null;
            _discount = false;
        }
        else
        {
            try
            {
                _editOrderErrorMessage = "";

                int totalOrders = CustomersService.GetTotalOrders(_selectedCustomer);
                var lastOrder = CustomersService.GetLastOrder(_selectedCustomer);

                if (totalOrders == 0)
                {
                    _orderModel.isComplementary = false;
                } else
                {
                    if (totalOrders % 10 == 0)
                    {
                            if (lastOrder.isComplementary)
                            {
                                _orderModel.isComplementary = false;
                            } else
                            {
                                _orderModel.isComplementary = true;
                            }
                    } else
                    {
                        _orderModel.isComplementary = false;
                    }
                }


                if (_orderModel.Id == Guid.Empty)
                {
                    _orders = OrdersService.Create(coffee: _selectedCoffeeType, addIn: _selectedAddInType, coffeePrice: _selectedCoffeePrice, addInPrice: _selectedAddInPrice, totalPrice: _totalPrice, userId: _globalState.CurrentUser.Id, phoneNumber: _selectedCustomer, isComplementary: _orderModel.isComplementary);
                } else
                {
                    _orders = OrdersService.Update(coffee: _selectedCoffeeType, addIn: _selectedAddInType, coffeePrice: _selectedCoffeePrice, addInPrice: _selectedAddInPrice, totalPrice: _totalPrice, userId: _globalState.CurrentUser.Id, phoneNumber: _orderModel.Customer, id: _orderModel.Id);
                }
                _showEditOrderDialog = false;
                ClearInputs();

            }
            catch (Exception e)
            {
                _editOrderErrorMessage = e.Message;
            }
        }
    }

    private void OnDeleteOrderDialogClose(bool isCancel)
    {
        if (isCancel)
        {

            _showDeleteOrderDialog = false;
            _deleteOrder = null;
        }
        else
        {
            try
            {
                _deleteOrderErrorMessage = "";
                _orders = OrdersService.Delete(_globalState.CurrentUser.Id, _deleteOrder.Id);
                _showDeleteOrderDialog = false;
                _deleteOrder = null;
            }
            catch (Exception e)
            {
                _deleteOrderErrorMessage = e.Message;
            }
        }
    }

}
